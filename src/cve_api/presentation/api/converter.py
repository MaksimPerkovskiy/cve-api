from flask import request
from functools import wraps
from pydantic import BaseModel


class InvalidParameterError(Exception):
    ...


def to_pydantic():
    """
    Decorator that parse Flask request query params and serialize them to
    the pydantic model.
    """
    def inner(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if not request.args:
                raise InvalidParameterError("Undefined query parameter.")
            
            request_data = dict(request.args)
            for attr, cls in func.__annotations__.items():
                if issubclass(cls, BaseModel) and attr != 'return':
                    data_obj = cls(**request_data)
            
            return func(data=data_obj, *args, **kwargs)
        return wrapper
    return inner
